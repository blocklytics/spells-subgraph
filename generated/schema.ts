// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Timelock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Timelock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Timelock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Timelock", id.toString(), this);
  }

  static load(id: string): Timelock | null {
    return store.get("Timelock", id) as Timelock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get tx(): Array<string | null> {
    let value = this.get("tx");
    return value.toStringArray();
  }

  set tx(value: Array<string | null>) {
    this.set("tx", Value.fromStringArray(value));
  }
}

export class Platform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Platform entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Platform entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Platform", id.toString(), this);
  }

  static load(id: string): Platform | null {
    return store.get("Platform", id) as Platform | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Array<string | null> {
    let value = this.get("target");
    return value.toStringArray();
  }

  set target(value: Array<string | null>) {
    this.set("target", Value.fromStringArray(value));
  }

  get timelock(): Array<string | null> {
    let value = this.get("timelock");
    return value.toStringArray();
  }

  set timelock(value: Array<string | null>) {
    this.set("timelock", Value.fromStringArray(value));
  }
}

export class Tx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Tx entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Tx entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Tx", id.toString(), this);
  }

  static load(id: string): Tx | null {
    return store.get("Tx", id) as Tx | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eta(): BigInt {
    let value = this.get("eta");
    return value.toBigInt();
  }

  set eta(value: BigInt) {
    this.set("eta", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtTransaction(): string {
    let value = this.get("createdAtTransaction");
    return value.toString();
  }

  set createdAtTransaction(value: string) {
    this.set("createdAtTransaction", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get signature(): string {
    let value = this.get("signature");
    return value.toString();
  }

  set signature(value: string) {
    this.set("signature", Value.fromString(value));
  }

  get data(): string {
    let value = this.get("data");
    return value.toString();
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }

  get target(): string {
    let value = this.get("target");
    return value.toString();
  }

  set target(value: string) {
    this.set("target", Value.fromString(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get isCancelled(): boolean {
    let value = this.get("isCancelled");
    return value.toBoolean();
  }

  set isCancelled(value: boolean) {
    this.set("isCancelled", Value.fromBoolean(value));
  }

  get isExecuted(): boolean {
    let value = this.get("isExecuted");
    return value.toBoolean();
  }

  set isExecuted(value: boolean) {
    this.set("isExecuted", Value.fromBoolean(value));
  }

  get cancelledAtTimestamp(): BigInt | null {
    let value = this.get("cancelledAtTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cancelledAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("cancelledAtTimestamp");
    } else {
      this.set("cancelledAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get cancelledAtTransaction(): string | null {
    let value = this.get("cancelledAtTransaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cancelledAtTransaction(value: string | null) {
    if (value === null) {
      this.unset("cancelledAtTransaction");
    } else {
      this.set("cancelledAtTransaction", Value.fromString(value as string));
    }
  }

  get executedAtTimestamp(): BigInt | null {
    let value = this.get("executedAtTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("executedAtTimestamp");
    } else {
      this.set("executedAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get executedAtTransaction(): string | null {
    let value = this.get("executedAtTransaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set executedAtTransaction(value: string | null) {
    if (value === null) {
      this.unset("executedAtTransaction");
    } else {
      this.set("executedAtTransaction", Value.fromString(value as string));
    }
  }
}

export class Target extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Target entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Target entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Target", id.toString(), this);
  }

  static load(id: string): Target | null {
    return store.get("Target", id) as Target | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get param(): Array<string | null> {
    let value = this.get("param");
    return value.toStringArray();
  }

  set param(value: Array<string | null>) {
    this.set("param", Value.fromStringArray(value));
  }

  get tx(): Array<string | null> {
    let value = this.get("tx");
    return value.toStringArray();
  }

  set tx(value: Array<string | null>) {
    this.set("tx", Value.fromStringArray(value));
  }
}

export class Param extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Param entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Param entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Param", id.toString(), this);
  }

  static load(id: string): Param | null {
    return store.get("Param", id) as Param | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): string {
    let value = this.get("target");
    return value.toString();
  }

  set target(value: string) {
    this.set("target", Value.fromString(value));
  }
}
