// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class LogNote extends EthereumEvent {
  get params(): LogNote__Params {
    return new LogNote__Params(this);
  }
}

export class LogNote__Params {
  _event: LogNote;

  constructor(event: LogNote) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get usr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arg1(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get arg2(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class MCDVow extends SmartContract {
  static bind(address: Address): MCDVow {
    return new MCDVow("MCDVow", address);
  }

  Ash(): BigInt {
    let result = super.call("Ash", []);

    return result[0].toBigInt();
  }

  try_Ash(): CallResult<BigInt> {
    let result = super.tryCall("Ash", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  Sin(): BigInt {
    let result = super.call("Sin", []);

    return result[0].toBigInt();
  }

  try_Sin(): CallResult<BigInt> {
    let result = super.tryCall("Sin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  bump(): BigInt {
    let result = super.call("bump", []);

    return result[0].toBigInt();
  }

  try_bump(): CallResult<BigInt> {
    let result = super.tryCall("bump", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  dump(): BigInt {
    let result = super.call("dump", []);

    return result[0].toBigInt();
  }

  try_dump(): CallResult<BigInt> {
    let result = super.tryCall("dump", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  flap(): BigInt {
    let result = super.call("flap", []);

    return result[0].toBigInt();
  }

  try_flap(): CallResult<BigInt> {
    let result = super.tryCall("flap", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  flapper(): Address {
    let result = super.call("flapper", []);

    return result[0].toAddress();
  }

  try_flapper(): CallResult<Address> {
    let result = super.tryCall("flapper", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  flop(): BigInt {
    let result = super.call("flop", []);

    return result[0].toBigInt();
  }

  try_flop(): CallResult<BigInt> {
    let result = super.tryCall("flop", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  flopper(): Address {
    let result = super.call("flopper", []);

    return result[0].toAddress();
  }

  try_flopper(): CallResult<Address> {
    let result = super.tryCall("flopper", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  hump(): BigInt {
    let result = super.call("hump", []);

    return result[0].toBigInt();
  }

  try_hump(): CallResult<BigInt> {
    let result = super.tryCall("hump", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  live(): BigInt {
    let result = super.call("live", []);

    return result[0].toBigInt();
  }

  try_live(): CallResult<BigInt> {
    let result = super.tryCall("live", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  sin(param0: BigInt): BigInt {
    let result = super.call("sin", [EthereumValue.fromUnsignedBigInt(param0)]);

    return result[0].toBigInt();
  }

  try_sin(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("sin", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  sump(): BigInt {
    let result = super.call("sump", []);

    return result[0].toBigInt();
  }

  try_sump(): CallResult<BigInt> {
    let result = super.tryCall("sump", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  vat(): Address {
    let result = super.call("vat", []);

    return result[0].toAddress();
  }

  try_vat(): CallResult<Address> {
    let result = super.tryCall("vat", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  wait(): BigInt {
    let result = super.call("wait", []);

    return result[0].toBigInt();
  }

  try_wait(): CallResult<BigInt> {
    let result = super.tryCall("wait", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("wards", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vat_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flapper_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get flopper_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CageCall extends EthereumCall {
  get inputs(): CageCall__Inputs {
    return new CageCall__Inputs(this);
  }

  get outputs(): CageCall__Outputs {
    return new CageCall__Outputs(this);
  }
}

export class CageCall__Inputs {
  _call: CageCall;

  constructor(call: CageCall) {
    this._call = call;
  }
}

export class CageCall__Outputs {
  _call: CageCall;

  constructor(call: CageCall) {
    this._call = call;
  }
}

export class DenyCall extends EthereumCall {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class FessCall extends EthereumCall {
  get inputs(): FessCall__Inputs {
    return new FessCall__Inputs(this);
  }

  get outputs(): FessCall__Outputs {
    return new FessCall__Outputs(this);
  }
}

export class FessCall__Inputs {
  _call: FessCall;

  constructor(call: FessCall) {
    this._call = call;
  }

  get tab(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FessCall__Outputs {
  _call: FessCall;

  constructor(call: FessCall) {
    this._call = call;
  }
}

export class FileCall extends EthereumCall {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class File1Call extends EthereumCall {
  get inputs(): File1Call__Inputs {
    return new File1Call__Inputs(this);
  }

  get outputs(): File1Call__Outputs {
    return new File1Call__Outputs(this);
  }
}

export class File1Call__Inputs {
  _call: File1Call;

  constructor(call: File1Call) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class File1Call__Outputs {
  _call: File1Call;

  constructor(call: File1Call) {
    this._call = call;
  }
}

export class FlapCall extends EthereumCall {
  get inputs(): FlapCall__Inputs {
    return new FlapCall__Inputs(this);
  }

  get outputs(): FlapCall__Outputs {
    return new FlapCall__Outputs(this);
  }
}

export class FlapCall__Inputs {
  _call: FlapCall;

  constructor(call: FlapCall) {
    this._call = call;
  }
}

export class FlapCall__Outputs {
  _call: FlapCall;

  constructor(call: FlapCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FlogCall extends EthereumCall {
  get inputs(): FlogCall__Inputs {
    return new FlogCall__Inputs(this);
  }

  get outputs(): FlogCall__Outputs {
    return new FlogCall__Outputs(this);
  }
}

export class FlogCall__Inputs {
  _call: FlogCall;

  constructor(call: FlogCall) {
    this._call = call;
  }

  get era(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FlogCall__Outputs {
  _call: FlogCall;

  constructor(call: FlogCall) {
    this._call = call;
  }
}

export class FlopCall extends EthereumCall {
  get inputs(): FlopCall__Inputs {
    return new FlopCall__Inputs(this);
  }

  get outputs(): FlopCall__Outputs {
    return new FlopCall__Outputs(this);
  }
}

export class FlopCall__Inputs {
  _call: FlopCall;

  constructor(call: FlopCall) {
    this._call = call;
  }
}

export class FlopCall__Outputs {
  _call: FlopCall;

  constructor(call: FlopCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class HealCall extends EthereumCall {
  get inputs(): HealCall__Inputs {
    return new HealCall__Inputs(this);
  }

  get outputs(): HealCall__Outputs {
    return new HealCall__Outputs(this);
  }
}

export class HealCall__Inputs {
  _call: HealCall;

  constructor(call: HealCall) {
    this._call = call;
  }

  get rad(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HealCall__Outputs {
  _call: HealCall;

  constructor(call: HealCall) {
    this._call = call;
  }
}

export class KissCall extends EthereumCall {
  get inputs(): KissCall__Inputs {
    return new KissCall__Inputs(this);
  }

  get outputs(): KissCall__Outputs {
    return new KissCall__Outputs(this);
  }
}

export class KissCall__Inputs {
  _call: KissCall;

  constructor(call: KissCall) {
    this._call = call;
  }

  get rad(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class KissCall__Outputs {
  _call: KissCall;

  constructor(call: KissCall) {
    this._call = call;
  }
}

export class RelyCall extends EthereumCall {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}
